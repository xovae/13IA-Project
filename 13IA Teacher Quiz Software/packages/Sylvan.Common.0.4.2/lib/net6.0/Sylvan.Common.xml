<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sylvan.Common</name>
    </assembly>
    <members>
        <member name="T:Sylvan.Base64Encoding">
            <summary>
            Provides encoding/decoding to Base64.
            </summary>
        </member>
        <member name="F:Sylvan.Base64Encoding.Default">
            <summary>
            Gets the default Base64Encoding, which uses the standard Base64 alphabet.
            </summary>
        </member>
        <member name="M:Sylvan.Base64Encoding.#ctor">
            <summary>
            Creates a new Base64Encoding.
            </summary>
        </member>
        <member name="M:Sylvan.Base64Encoding.Encode(System.Byte[],System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Encodes bytes as Base64 encoded characters.
            </summary>
        </member>
        <member name="M:Sylvan.Base64Encoding.Decode(System.String)">
            <summary>
            Decodes a base64 encoded string.
            </summary>
            <remarks>This method does not throw. Any invalid characters in the input stream are simply skipped.</remarks>
            <param name="src">Base64 encoded string.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:Sylvan.Base64Encoding.Decode(System.Char[])">
            <summary>
            Decodes base64 encoded data.
            </summary>
            <param name="src">Base64 encoded data.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:Sylvan.Base64Encoding.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decodes base64 encoded data.
            </summary>
            <param name="reader">The text reader containing base64 encoded data.</param>
            <param name="oStream">The stream to capture the decoded data.</param>
        </member>
        <member name="T:Sylvan.Objects">
            <summary>
            Exposes shared boxes for common primitives.
            </summary>
        </member>
        <member name="M:Sylvan.Objects.Box(System.Boolean)">
            <summary>
            Gets a shared box for a boolean value.
            </summary>
        </member>
        <member name="M:Sylvan.Objects.Box(System.Int32)">
            <summary>
            Gets a shared box for an integer value within a cerain range, or produces a new boxed value.
            </summary>
        </member>
        <member name="T:Sylvan.CodeGeneration.IdentifierStyle">
            <summary>
            Provides conversions between different styles of identifiers.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.IdentifierStyle.CamelCase">
            <summary>
            A "camelCase" identifier style.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.IdentifierStyle.Database">
            <summary>
            A "database_name" identifier style.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.IdentifierStyle.Sentence">
            <summary>
            A "human readable sentence" identifier style.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.IdentifierStyle.PascalCase">
            <summary>
            A "PascalCase" identifier style.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.IdentifierStyle.Convert(System.String)">
            <summary>
            Converts a string to the given identifier style.
            </summary>
        </member>
        <member name="T:Sylvan.CodeGeneration.CamelCaseStyle">
            <summary>
            The camel case identifier style.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.CamelCaseStyle.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.CodeGeneration.UnderscoreStyle">
            <summary>
            An identifier style that uses underscores to separate segments, commonly called "snake_case".
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.UnderscoreStyle.#ctor(Sylvan.CodeGeneration.CasingStyle)">
            <summary>
            Constructs a new UnderscoreStyle.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.UnderscoreStyle.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.CodeGeneration.DashStyle">
            <summary>
            An identifier style that uses dashes to separate segments, commonly called "kebab-case".
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.DashStyle.#ctor(Sylvan.CodeGeneration.CasingStyle)">
            <summary>
            Constructs a new DashStyle.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.DashStyle.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.CodeGeneration.SentenceStyle">
            <summary>
            An identifier style that uses spaces to separate segments. This can be useful to convert identifiers to be presented in non-localized UI elements.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.SentenceStyle.#ctor(Sylvan.CodeGeneration.CasingStyle)">
            <summary>
            Constructs a new SentenceStyle.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.SentenceStyle.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.CodeGeneration.QuotedIdentifierStyle">
            <summary>
            An identifier style commonly used by database languages like sql.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.QuotedIdentifierStyle.#ctor(Sylvan.CodeGeneration.CasingStyle,System.Char)">
            <summary>
            Constructs a new QuotedIdentifierStyle.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.QuotedIdentifierStyle.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.CodeGeneration.PascalCaseStyle">
            <summary>
            The pascale identifier style.
            </summary>
        </member>
        <member name="M:Sylvan.CodeGeneration.PascalCaseStyle.Convert(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.CodeGeneration.CasingStyle">
            <summary>
            The casing style used within segments.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.CasingStyle.Unchanged">
            <summary>
            Use the casing of the original identifier.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.CasingStyle.UpperCase">
            <summary>
            UpperCase every character.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.CasingStyle.LowerCase">
            <summary>
            LowerCase every character.
            </summary>
        </member>
        <member name="F:Sylvan.CodeGeneration.CasingStyle.TitleCase">
            <summary>
            UpperCase first character, and lowercase the rest.
            </summary>
        </member>
        <member name="T:Sylvan.Collections.EnumerableExtensions">
            <summary>
            Extension methods for IEnumerable.
            </summary>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.MinMax``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the minimum and maximum value in a sequence.
            </summary>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.RecurseDepthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerates a hierarchy depth first.
            </summary>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.RecurseDepthFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerates a hierarchy depth first.
            </summary>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum item in a set based on a comparable key.
            </summary>
            <remarks>
            This behaves similarly to OrderByDescending().FirstOrDefault(), except
            that it doesn't require doing a complete sort.
            </remarks>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum item in a set based on a comparable key.
            </summary>
            <remarks>
            This behaves similarly to OrderBy().FirstOrDefault(), except
            that it doesn't require doing a complete sort.
            </remarks>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.Closure``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerates the closure of a graph given a starting node <paramref name="root"/>.
            </summary>
        </member>
        <member name="M:Sylvan.Collections.EnumerableExtensions.OrderByTopological``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Provides a topological ordering of a sequence based on node dependency.
            </summary>
        </member>
        <member name="T:Sylvan.Diagnostics.PerformanceCounter">
            <summary>
            A named counter that tracks the frequency with which it is called.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceCounter.#ctor(System.String)">
            <summary>
            Creates a new PerformanceCounter.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceCounter.Name">
            <summary>
            Gets the Name.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceCounter.Count">
            <summary>
            Gets the Count.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceCounter.CreateTime">
            <summary>
            Gets the UTC timestamp when the counter was created.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceCounter.AverageFrequency">
            <summary>
            Gets the average frequency with which the counter is hit, in hertz.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceCounter.Increment">
            <summary>
            Increments the counter.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceCounter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.Diagnostics.PerformanceTimer">
            <summary>
            A timer for measuring application performance.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceTimer.#ctor(System.String)">
            <summary>
            Constructs a new PerformanceTimer.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.Name">
            <summary>
            Gets the name of the timer.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.Count">
            <summary>
            Gets the number of times the timer was triggered.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.TotalElasped">
            <summary>
            Gets the total elapsed time the timer was active.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.AverageElapsed">
            <summary>
            Gets the average time the timer was active per trigger.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.CreateTime">
            <summary>
            Gets the time when timer timer was created.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.AverageFrequency">
            <summary>
            Gets the average frequency with which the timer has been triggered in hertz.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.PerformanceTimer.EstimatedOverhead">
            <summary>
            Gets the estimated overhead that this timer introduces.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceTimer.Start">
            <summary>
            Starts a new timed section.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceTimer.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.Diagnostics.PerformanceTimer.TimedSection">
            <summary>
            An timed section of a PerformanceTimer.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.PerformanceTimer.TimedSection.Dispose">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:Sylvan.Diagnostics.RegisteredTimer">
            <summary>
            A registry for named PerformanceTimers.
            </summary>
        </member>
        <member name="P:Sylvan.Diagnostics.RegisteredTimer.RegisteredTimers">
            <summary>
            Enumerates the registered performance timers.
            </summary>
        </member>
        <member name="M:Sylvan.Diagnostics.RegisteredTimer.Find(System.String)">
            <summary>
            Finds a registered performance timer.
            </summary>
            <returns>The PerformanceTimer, or null of one wasn't found.</returns>
        </member>
        <member name="M:Sylvan.Diagnostics.RegisteredTimer.Create(System.String)">
            <summary>
            Gets an existing, or creates a new registered timer.
            </summary>
        </member>
        <member name="M:Sylvan.EventExtensions.InvokeAll``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes a multicast delegate, ensureing that all registered handlers are invoked and aggregating any exceptions.
            </summary>
            <exception cref="T:System.AggregateException">If any registered handlers throw.</exception>
        </member>
        <member name="T:Sylvan.IClock">
            <summary>
            Provides an abstraction for getting the current time.
            </summary>
        </member>
        <member name="P:Sylvan.IClock.UtcNow">
            <summary>
            Gets the current time.
            </summary>
        </member>
        <member name="T:Sylvan.SystemClock">
            <summary>
            An IClock implementation using the system clock.
            </summary>
        </member>
        <member name="F:Sylvan.SystemClock.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="T:Sylvan.TestClock">
            <summary>
            An IClock instance that allows manually advancing the time, for testing.
            </summary>
        </member>
        <member name="M:Sylvan.TestClock.#ctor(System.DateTime)">
            <summary>
            Constructs a new TestClock.
            </summary>
        </member>
        <member name="P:Sylvan.TestClock.UtcNow">
            <summary>
            Gets the current time.
            </summary>
        </member>
        <member name="M:Sylvan.TestClock.Advance(System.TimeSpan)">
            <summary>
            Advances the clock.
            </summary>
        </member>
        <member name="T:Sylvan.IO.Base64Encoder">
            <summary>
            An Encoder implementation for Base64.
            </summary>
        </member>
        <member name="M:Sylvan.IO.Base64Encoder.#ctor">
            <summary>
            Creates a new Base64Encoder.
            </summary>
        </member>
        <member name="M:Sylvan.IO.Base64Encoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.IO.BytePattern">
            <summary>
            Implements a boyer-moore search algorithm to find sequences of bytes.
            </summary>
        </member>
        <member name="P:Sylvan.IO.BytePattern.Length">
            <summary>
            Gets the length of the pattern.
            </summary>
        </member>
        <member name="M:Sylvan.IO.BytePattern.#ctor(System.Byte[])">
            <summary>
            Constructs a new BytePattern.
            </summary>
        </member>
        <member name="M:Sylvan.IO.BytePattern.SearchAll(System.Byte[])">
            <summary>
            Enumerates all instances of a pattern in an input array.
            </summary>
        </member>
        <member name="M:Sylvan.IO.BytePattern.SearchAll(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Enumerates all instances of a pattern in a section of an input array.
            </summary>
            <param name="data">The array to search within.</param>
            <param name="startIdx">The index from which to start the search.</param>
            <param name="endIdx">The index beyond which no match can start.</param>
        </member>
        <member name="M:Sylvan.IO.BytePattern.Search(System.Byte[],System.Int32)">
            <summary>
            Finds the index of the next pattern match.
            </summary>
            <param name="data">The array to search.</param>
            <param name="offset">The offset from which to start the search.</param>
            <returns>The index, or -1 if no match is found.</returns>
        </member>
        <member name="M:Sylvan.IO.BytePattern.Search(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Finds the index of the next pattern match.
            </summary>
            <param name="data">The array to search.</param>
            <param name="offset">The offset from which to start the search.</param>
            <param name="endIdx">The index beyond which no match can start.</param>
            <returns>The index, or -1 if no match is found.</returns>
        </member>
        <member name="T:Sylvan.IO.EncoderResult">
            <summary>
            The results of a call to <see cref="M:Sylvan.IO.Encoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)"/>.
            </summary>
        </member>
        <member name="F:Sylvan.IO.EncoderResult.Flush">
            <summary>
            Indicates that all input data was consumed and encoded to the output buffer.
            </summary>
            <remarks>
            This result doesn't necessarily indicate that the output is complete however.
            A subsequent call to Encode with an empty input buffer might be required to 
            finalize the output encoding.
            </remarks>
        </member>
        <member name="F:Sylvan.IO.EncoderResult.RequiresInput">
            <summary>
            Indicates that more input data is required to continue encoding.
            </summary>
        </member>
        <member name="F:Sylvan.IO.EncoderResult.RequiresOutputSpace">
            <summary>
            Indates that the output buffer space was exhausted before the input was fully encoded.
            </summary>
        </member>
        <member name="F:Sylvan.IO.EncoderResult.Complete">
            <summary>
            Indicates that the entire input buffer was encoded to the output and the result can be considered complete.
            </summary>
        </member>
        <member name="T:Sylvan.IO.Encoder">
            <summary>
            A data encoder.
            </summary>
            <remarks>
            Encoders can potentially be stateful, maintaining information between calls to <see cref="M:Sylvan.IO.Encoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)"/>.
            </remarks>
        </member>
        <member name="M:Sylvan.IO.Encoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            Encodes data from <paramref name="src"/> into <paramref name="dst"/>.
            </summary>
            <param name="src">The source data to encode. Pass <see cref="P:System.ReadOnlySpan`1.Empty"/> to indicate the final block.</param>
            <param name="dst">The destination for the encoded data.</param>
            <param name="bytesConsumed">The number of bytes consumed from the source buffer.</param>
            <param name="bytesWritten">The number of bytes written to the destination buffer.</param>
            <returns>A value indicate the status of the encode operation.</returns>
        </member>
        <member name="T:Sylvan.IO.EncoderStream">
            <summary>
            A stream that encodes data written to it.
            </summary>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.#ctor(System.IO.Stream,Sylvan.IO.Encoder)">
            <summary>
            Creates a new EncoderStream.
            </summary>
            <param name="stream">The underlying stream to write to.</param>
            <param name="encoder">The encoder to use to write to the stream.</param>
        </member>
        <member name="P:Sylvan.IO.EncoderStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.EncoderStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.EncoderStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.EncoderStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.EncoderStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.Close">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.EncoderStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.IO.HexEncoder">
            <summary>
            An Encoder implementation that writes hexadecimal encoded bytes.
            </summary>
        </member>
        <member name="M:Sylvan.IO.HexEncoder.#ctor(System.Boolean)">
            <summary>
            Creates a new HexEncoder.
            </summary>
            <param name="upperCase">Indicates if uppercase or lowercase characters should be written.</param>
        </member>
        <member name="M:Sylvan.IO.HexEncoder.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.IO.PooledMemoryStream">
            <summary>
            A memory-backed <see cref="T:System.IO.Stream"/> implementation using pooled buffers.
            </summary>
            <remarks>
            This class uses pooled buffers to reduce allocations, and memory clearing
            that are present with <see cref="T:System.IO.MemoryStream"/>.
            </remarks>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.#ctor">
            <summary>
            Creates a PooledMemoryStream.
            </summary>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.#ctor(System.Buffers.ArrayPool{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Creates a PooledMemoryStream.
            </summary>
            <param name="bufferPool">The <see cref="T:System.Buffers.ArrayPool`1"/> to use.</param>
            <param name="blockShift">The size of the buffer to use expressed 1 &lt;&lt; blockShift. (Valid values 6 - 24)</param>
            <param name="clearOnReturn">A boolean indicating whether to clear the buffers after use.</param>
        </member>
        <member name="P:Sylvan.IO.PooledMemoryStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.PooledMemoryStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.PooledMemoryStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.PooledMemoryStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.PooledMemoryStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.CopyTo(System.IO.Stream,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.PooledMemoryStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.IO.RandomStream">
            <summary>
            A readonly stream implementation that provides a random sequence of bytes.
            </summary>
        </member>
        <member name="M:Sylvan.IO.RandomStream.#ctor(System.Int64)">
            <summary>
            Constructs a new RandomStream instance.
            </summary>
        </member>
        <member name="M:Sylvan.IO.RandomStream.#ctor(System.Random,System.Int64)">
            <summary>
            Constructs a new RandomStream instance.
            </summary>
        </member>
        <member name="P:Sylvan.IO.RandomStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.RandomStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.RandomStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.RandomStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Sylvan.IO.RandomStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.RandomStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.RandomStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.RandomStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.RandomStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.IO.RandomStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.IO.StreamExtensions">
            <summary>
            Extension methods for Stream.
            </summary>
        </member>
        <member name="M:Sylvan.IO.StreamExtensions.WithReadProgress(System.IO.Stream,System.Action{System.Double},System.Double)">
            <summary>
            Creates a stream that will report read progress.
            </summary>
            <param name="stream">A stream that is readable and seekable, usually a file stream.</param>
            <param name="callback">The callback to be notified of progress.</param>
            <param name="factor">A value indicating the frequency of progress updates, between 0.0 and 1.0 exclusive.</param>
            <returns>A stream that will report progress when read.</returns>
        </member>
        <member name="T:Sylvan.IO.StringBuffer">
            <summary>
            A memory-backed <see cref="T:System.IO.TextWriter"/> implementation.
            </summary>
        </member>
        <member name="M:Sylvan.IO.StringBuffer.#ctor">
            <summary>
            Creates a BlockMemoryStream using the shared array pool.
            </summary>
        </member>
        <member name="M:Sylvan.IO.StringBuffer.#ctor(System.Buffers.ArrayPool{System.Char},System.Int32,System.Boolean)">
            <summary>
            Creates a PooledMemoryStream.
            </summary>
            <param name="bufferPool">The <see cref="T:System.Buffers.ArrayPool`1"/> to use.</param>
            <param name="blockShift">The size of the buffer to use expressed 1 &lt;&lt; blockShift. (Valid values 6 - 24)</param>
            <param name="clearOnReturn">A boolean indicating whether to clear the buffers after use.</param>
        </member>
        <member name="T:Sylvan.IO.SubStream">
            <summary>
            Provides readonly-only access to a sub-range of an existing stream.
            </summary>
        </member>
        <member name="T:Sylvan.IsoDate">
            <summary>
            Provides ISO 8601 date parsing and formatting.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)">
            <summary>
            Parse the given <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">The source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateTime"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:Sylvan.IsoDate.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)">
            <summary>
            Parse the given <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">The source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateTimeOffset"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:Sylvan.IsoDate.TryParse(System.ReadOnlySpan{System.Char},System.DateOnly@)">
            <summary>
            Parse the given <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">The source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateOnly"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:Sylvan.IsoDate.TryParseDateTimeOffset(System.ReadOnlySpan{System.Char},Sylvan.IsoDate.DateTimeParseData@)">
             <summary>
             ISO 8601 date time parser (ISO 8601-1:2019).
             </summary>
             <param name="source">The date/time to parse in UTF-8 format.</param>
             <param name="parseData">The parsed <see cref="T:Sylvan.IsoDate.DateTimeParseData"/> for the given <paramref name="source"/>.</param>
             <remarks>
             Supports extended calendar date (5.2.2.1) and complete (5.4.2.1) calendar date/time of day
             representations with optional specification of seconds and fractional seconds.
            
             Times can be explicitly specified as UTC ("Z" - 5.3.3) or offsets from UTC ("+/-hh:mm" 5.3.4.2).
             If unspecified they are considered to be local per spec.
            
             Examples: (TZD is either "Z" or hh:mm offset from UTC)
            
              YYYY-MM-DD               (eg 1997-07-16)
              YYYY-MM-DDThh:mm         (eg 1997-07-16T19:20)
              YYYY-MM-DDThh:mm:ss      (eg 1997-07-16T19:20:30)
              YYYY-MM-DDThh:mm:ss.s    (eg 1997-07-16T19:20:30.45)
              YYYY-MM-DDThh:mmTZD      (eg 1997-07-16T19:20+01:00)
              YYYY-MM-DDThh:mm:ssTZD   (eg 1997-07-16T19:20:3001:00)
              YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45Z)
            
             Generally speaking we always require the "extended" option when one exists (3.1.3.5).
             The extended variants have separator characters between components ('-', ':', '.', etc.).
             Spaces are not permitted.
             </remarks>
             <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:Sylvan.IsoDate.TryCreateDateTimeOffset(System.DateTime,Sylvan.IsoDate.DateTimeParseData@,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.TryCreateDateTimeOffset(Sylvan.IsoDate.DateTimeParseData@,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.TryCreateDateTimeOffsetInterpretingDataAsLocalTime(Sylvan.IsoDate.DateTimeParseData,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset/Local time conversion factory.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.ToStringIso(System.DateTime)">
            <summary>
            Gets a DateTime value as an ISO 8601 formatted string.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.TryFormatIso(System.DateTime,System.Span{System.Char},System.Int32@)">
            <summary>
            Tries to write the Datetime value as an ISO 8601 formatted string.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.ToStringIso(System.DateTimeOffset)">
            <summary>
            Gets the DateTimeOffset as an ISO 8601 string.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.ToStringIso(System.DateOnly)">
            <summary>
            Gets a DateOnly as an ISO 8601 formatted string.
            </summary>	
        </member>
        <member name="M:Sylvan.IsoDate.TryFormatIso(System.DateOnly,System.Span{System.Char},System.Int32@)">
            <summary>
            Tries to write a DateOnly as an ISO 8601 formatted string.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.TryFormatIso(System.DateTimeOffset,System.Span{System.Char},System.Int32@)">
            <summary>
            Tries to write a DateTimeOffSet as an ISO 8601 formatted string.
            </summary>
        </member>
        <member name="M:Sylvan.IsoDate.WriteFourDigits(System.UInt32,System.Span{System.Char},System.Int32)">
            <summary>
            Writes a value [ 0000 .. 9999 ] to the buffer starting at the specified offset.
            This method performs best when the starting index is a constant literal.
            </summary>
        </member>
        <member name="T:Sylvan.Primitives.Primitive">
            <summary>
            A structure capable of holding common C# primitive types. Additionally, it can contain <see
            cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/><see cref="T:System.TimeSpan"/> and <see cref="T:System.Guid"/>.
            </summary>
            <remarks>
            The size of this struct is 16 bytes regardless of what it is holding. This is the size
            required by the largest value type it can contain. The struct does not store the knowledge of
            the type of object it contains, which must be stored separately. <see cref="T:Sylvan.Primitives.TypedPrimitive"/>
            expands on Primitive to store type information (requiring additional storage size) and
            provide type checks when retrieving values. Primitive should be used when a homogeneous set
            of values needs to be stored and it would be more efficient to store the type information
            externally.
            </remarks>
        </member>
        <member name="T:Sylvan.Primitives.PrimitiveType">
            <summary>
            Defines the types of values that can be stored in a <see cref="T:Sylvan.Primitives.Primitive"/> struct.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.None">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds no value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Boolean">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a boolean value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Char">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a character value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Byte">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a byte value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Int16">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds an Int16 value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Int32">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds an Int32 value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Int64">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds an Int64 value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.SByte">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds an SByte value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.UInt16">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a UInt16 value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.UInt32">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a UInt32 value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.UInt64">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a UInt64 value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Float">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a float value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Double">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a double value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.DateTime">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a DateTime value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.DateTimeOffset">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a DateTimeOffset value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.TimeSpan">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a TimeSpan value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Decimal">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a Decimal value.
            </summary>
        </member>
        <member name="F:Sylvan.Primitives.PrimitiveType.Guid">
            <summary>
            Indicates that the <see cref="T:Sylvan.Primitives.TypedPrimitive"/> holds a Guid value.
            </summary>
        </member>
        <member name="T:Sylvan.Primitives.TypedPrimitive">
            <summary>
            Expands upon the <see cref="T:Sylvan.Primitives.Primitive"/> structure to provide information about the value
            contained.
            </summary>
            <remarks>
            The size of this structure is 20 bytes. This is 4 bytes larger than the <see
            cref="T:Sylvan.Primitives.Primitive"/> type. It can be more efficient to
            use <see cref="T:Sylvan.Primitives.Primitive"/> directly, when the <see cref="T:Sylvan.Primitives.PrimitiveType"/> value can be
            stored externally.
            </remarks>
        </member>
        <member name="P:Sylvan.Primitives.TypedPrimitive.Type">
            <summary>
            Gets the type of value stored in this TypedPrimitive.
            </summary>
        </member>
        <member name="P:Sylvan.Primitives.TypedPrimitive.Value">
            <summary>
            Gets the Primitive values stored in this TypedPrimitive.
            </summary>
        </member>
        <member name="M:Sylvan.Primitives.TypedPrimitive.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.Primitives.TypedPrimitive.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Sylvan.Primitives.TypedPrimitive.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sylvan.StringPool">
            <summary>
            An IStringFactory implementation that provides string de-duping capabilities..
            </summary>
        </member>
        <member name="M:Sylvan.StringPool.#ctor">
            <summary>
            Creates a new StringPool instance.
            </summary>
        </member>
        <member name="M:Sylvan.StringPool.#ctor(System.Int32)">
            <summary>
            Creates a new StringPool instance.
            </summary>
            <param name="stringSizeLimit">The size limit beyond which strings will not be pooled.</param>
            <remarks>
            The <paramref name="stringSizeLimit"/> prevents pooling strings beyond a certain size. 
            Longer strings are typically less likely to be duplicated, and and carry extra cost for identifying uniqueness.
            </remarks>
        </member>
        <member name="M:Sylvan.StringPool.GetString(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the characters in the input buffer.
            </summary>
        </member>
        <member name="M:Sylvan.StringPool.GetString(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a string containing the characters in the input buffer.
            </summary>
        </member>
    </members>
</doc>
